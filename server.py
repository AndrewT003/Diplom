from flask import Flask, Response, render_template, request, jsonify
from picamera2 import Picamera2
import time
import cv2
from adafruit_servokit import ServoKit
import torch
import uuid
import numpy as np
import sys
sys.path.append('/home/pi/Desktop/scripts/app/sort')  # –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é SORT
from sort import Sort  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ SORT –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
from ultralytics import YOLO  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ YOLOv8

app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞–º–µ—Ä–∏
picam2 = Picamera2()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞–Ω–µ–ª—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤
kit = ServoKit(channels=16)

# –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä–∏
picam2.start()

# –ü–æ—Ç–æ—á–Ω—ñ –∫—É—Ç–∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤
servo_pan = 90
servo_tilt = 90

# –ö—Ä–æ–∫ –ø–æ–≤–æ—Ä–æ—Ç—É
STEP = 5

# –ú–µ–∂—ñ –∫—É—Ç—ñ–≤
MIN_ANGLE = 0
MAX_ANGLE = 180

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ YOLOv8
model = YOLO('yolov8n.pt')  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π—à–≤–∏–¥—à—É –º–æ–¥–µ–ª—å 'yolov8n.pt'

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
detected_objects = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–∫–µ—Ä–∞ SORT
tracker = Sort()

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —Å—Ç–µ–∂–µ–Ω–Ω—è
tracking_object_id = None

def generate():
    global detected_objects, tracking_object_id
    while True:
        frame = picam2.capture_array()
        frame = cv2.rotate(frame, cv2.ROTATE_180)

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ 4 –∫–∞–Ω–∞–ª—ñ–≤ (—è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ) —É 3 –∫–∞–Ω–∞–ª–∏ (RGB)
        if frame.shape[2] == 4:  # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—î 4 –∫–∞–Ω–∞–ª–∏ (–≤–∫–ª—é—á–∞—é—á–∏ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ RGB (BGR –≤ –Ω–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É)

        # –î–µ—Ç–µ–∫—Ü—ñ—è —á–µ—Ä–µ–∑ YOLOv8
        results = model.predict(frame, verbose=False, stream=False)[0]

        boxes = []
        for box in results.boxes:
            cls_id = int(box.cls[0])
            conf = float(box.conf[0])
            if cls_id == 0:  # —Ç—ñ–ª—å–∫–∏ –ª—é–¥–∏ (ID 0 –¥–ª—è 'person')
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                boxes.append([x1, y1, x2, y2, conf])

        # –Ø–∫—â–æ —î –¥–µ—Ç–µ–∫—Ü—ñ—ó, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–µ–∫–µ—Ä
        if boxes:
            tracked_objects = tracker.update(np.array(boxes))
            current_objects = {}

            for obj in tracked_objects:
                x1, y1, x2, y2, track_id = obj
                track_id = int(track_id)
                object_name = f"Person ({track_id})"

                if track_id not in detected_objects:
                    detected_objects[track_id] = {
                        'name': object_name,
                        'first_seen': time.time(),
                        'box': [x1, y1, x2, y2],
                        'last_seen': time.time()
                    }

                detected_objects[track_id]['box'] = [x1, y1, x2, y2]
                detected_objects[track_id]['last_seen'] = time.time()
                current_objects[track_id] = detected_objects[track_id]

                cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                cv2.putText(frame, f"ID: {track_id}", (int(x1), int(y1) - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

            detected_objects = current_objects

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–µ–∂–µ–Ω–Ω—è
            if tracking_object_id is not None:
                if tracking_object_id in detected_objects:
                    track_object_with_servos(tracking_object_id, frame)
                else:
                    print(f"[WARN] –û–±'—î–∫—Ç –∑ ID {tracking_object_id} –±—ñ–ª—å—à–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–∂–µ–Ω–Ω—è.")
                    tracking_object_id = None
        else:
            if tracking_object_id is not None:
                print("[INFO] –û–±'—î–∫—Ç—ñ–≤ –Ω–µ–º–∞—î –≤ –∫–∞–¥—Ä—ñ. –°—Ç–µ–∂–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.")
                tracking_object_id = None

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–∞–¥—Ä—É MJPEG
        _, jpeg = cv2.imencode('.jpg', frame, [int(cv2.IMWRITE_JPEG_QUALITY), 90])
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n\r\n')
        time.sleep(0.01)

@app.route('/video')
def video():
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/objects')
def objects():
    return jsonify([{'name': data['name']} for name, data in detected_objects.items()])


@app.route('/move', methods=['POST'])
def move_servo():
    global servo_pan, servo_tilt

    direction = request.form.get('direction')
    if direction == 'left' and servo_pan < MAX_ANGLE:
        servo_pan += STEP
    elif direction == 'right' and servo_pan > MIN_ANGLE:
        servo_pan -= STEP
    elif direction == 'up' and servo_tilt < MAX_ANGLE:
        servo_tilt += STEP
    elif direction == 'down' and servo_tilt > MIN_ANGLE:
        servo_tilt -= STEP
    kit.servo[0].angle = servo_pan
    kit.servo[1].angle = servo_tilt

    print(f"–ü–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è: {servo_pan}, –ù–∞—Ö–∏–ª: {servo_tilt}")
    return 'OK'


@app.route('/track', methods=['POST'])
def track_object():
    global tracking_object_id

    object_index = int(request.form.get('object_id'))  # index –∑—ñ —Å–ø–∏—Å–∫—É
    keys = list(detected_objects.keys())
    if 0 <= object_index < len(keys):
        tracking_object_id = keys[object_index]
        print(f"[INFO] –°—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ –¥–ª—è ID: {tracking_object_id}")
        return '–°—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!'
    return '–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –æ–±\'—î–∫—Ç–∞', 400


@app.route('/stop_tracking', methods=['POST'])
def stop_tracking():
    global tracking_object_id
    tracking_object_id = None
    print("[INFO] –°—Ç–µ–∂–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.")
    return '–°—Ç–µ–∂–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ!'


def track_object_with_servos(object_id, frame):
    """–ü—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–µ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è —Å–µ—Ä–≤–æ –Ω–∞ —Ü–µ–Ω—Ç—Ä –æ–±'—î–∫—Ç–∞ –∑ –¥—ñ–∞–≥–æ–Ω–∞–ª—å–Ω–∏–º —Ä—É—Ö–æ–º"""
    global servo_pan, servo_tilt, kit

    if object_id in detected_objects:
        obj = detected_objects[object_id]
        x1, y1, x2, y2 = obj['box']
        center_x = (x1 + x2) // 2
        center_y = (y1 + y2) // 2

        frame_height, frame_width, _ = frame.shape
        delta_x = center_x - frame_width // 2  # –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ü–µ–Ω—Ç—Ä–æ–º –∫–∞–¥—Ä—É —Ç–∞ —Ü–µ–Ω—Ç—Ä–æ–º –æ–±'—î–∫—Ç–∞ –ø–æ X
        delta_y = center_y - frame_height // 2  # –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ü–µ–Ω—Ç—Ä–æ–º –∫–∞–¥—Ä—É —Ç–∞ —Ü–µ–Ω—Ç—Ä–æ–º –æ–±'—î–∫—Ç–∞ –ø–æ Y

        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è X —Ç–∞ Y:
        sensitivity = 0.05  # –ó–º–µ–Ω—à–∏—Ç–∏ —á–∏ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç—Ä–µ–±

        # –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ—â–µ–Ω–Ω—è –ø–æ –æ—Å—è–º
        correction_x = delta_x * sensitivity  # –∑–º—ñ—â–µ–Ω–Ω—è –ø–æ –æ—Å—ñ X
        correction_y = delta_y * sensitivity  # –∑–º—ñ—â–µ–Ω–Ω—è –ø–æ –æ—Å—ñ Y

        # –õ—ñ–º—ñ—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–∏ –∫—É—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫)
        max_step = 2  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫ –¥–ª—è –∑–º—ñ–Ω–∏ –∫—É—Ç–∞ (–∑–∞ –æ–¥–∏–Ω —Ä–∞–∑)
        
        # –û–±–º–µ–∂—É—î–º–æ —Ä—É—Ö –ø–æ X (–ø–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è)
        if abs(correction_x) > max_step:
            correction_x = max_step * (1 if correction_x > 0 else -1)

        # –û–±–º–µ–∂—É—î–º–æ —Ä—É—Ö –ø–æ Y (–Ω–∞—Ö–∏–ª)
        if abs(correction_y) > max_step:
            correction_y = max_step * (1 if correction_y > 0 else -1)

        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ç–∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        servo_pan += int(correction_x)
        servo_tilt += int(correction_y)

        # –û–±–º–µ–∂—É—î–º–æ –∫—É—Ç–∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤ –≤ –º–µ–∂–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        servo_pan = max(MIN_ANGLE, min(servo_pan, MAX_ANGLE))
        servo_tilt = max(MIN_ANGLE, min(servo_tilt, MAX_ANGLE))

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤—ñ –∫—É—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∏
        kit.servo[0].angle = servo_pan
        kit.servo[1].angle = servo_tilt

        print(f"üéØ –ü–∞–Ω: {servo_pan}, –ù–∞—Ö–∏–ª: {servo_tilt} | ŒîX: {delta_x}, ŒîY: {delta_y}")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, threaded=True)

